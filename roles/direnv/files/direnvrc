#!/bin/bash

AWS_CREDENTIALS_FILE=$HOME/.aws/credentials

AWS_PROFILE_NAME=default

use_aws_profile(){
    if [ ! "$1" = "" ]; then AWS_PROFILE_NAME="$1"; fi
    source <(\
        sed -n -e "/\[${AWS_PROFILE_NAME}\]/ , /^\s*$/ {
            //d;
            s/aws_access_key_id[ =]*/export AWS_ACCESS_KEY_ID=/;
            s/aws_secret_access_key[ =]*/export AWS_SECRET_ACCESS_KEY=/;
            s/region[ =]*/export AWS_DEFAULT_REGION=/;
            p;
        }"  "$AWS_CREDENTIALS_FILE" | grep 'AWS_'
    )
    export AWS_PROFILE_NAME
}


hash_changed(){
    mkdir -p .direnv/hashfiles
    FILE="$1"
    if [ ! -f "$FILE" ]; then
        echo "File not found: $FILE" >&2
        return 1
    fi
    HASH_FILE=".direnv/hashfiles/$1.md5"
    CURRENT_MD5=$(md5sum "$FILE" | cut -d' ' -f1)
    OLD_MD5=""
    if [ -f "$HASH_FILE" ]; then
        OLD_MD5="$(cat "$HASH_FILE")"
    fi
    HASH_FILE_DIR=$(dirname "$HASH_FILE")
    [ -d "$HASH_FILE_DIR" ] || mkdir -p "$HASH_FILE_DIR"

    if [ ! "$OLD_MD5" = "$CURRENT_MD5" ]; then
        echo "$CURRENT_MD5" > "$HASH_FILE"
        return 0
    else
        return 1
    fi
}

read_pyproject_dependencies(){
    PYPROJECT_TOML="${1:-pyproject.toml}"
    python - "$PYPROJECT_TOML" <<EOF
import sys
import toml

with open(sys.argv[1]) as fp:
    project = toml.load(fp).get('project', {})

dependencies = project.get('dependencies', [])
for section, deps in project.get('optional-dependencies').items():
    dependencies += deps

for dependency in dependencies:
    print(dependency)
EOF
}

use_requirements(){
    if hash_changed "$1"; then
        echo 'Installing requirements.txt'
        pip install -r "$1"
    fi
}

layout_pyproject(){
    layout python3
    PYPROJECT_TOML="${1:-pyproject.toml}"
    if hash_changed "$PYPROJECT_TOML"; then
        echo "Installing/updating dependencies from $PYPROJECT_TOML .."
        pip install -q -U pip wheel
        pip install -q -r <(read_pyproject_dependencies "$PYPROJECT_TOML")
    fi
}


use_ruby(){
    local RUBY_INSTALLS="${RUBY_INSTALLS:-$HOME/.asdf/installs/ruby}"
    local DEFAULT_VERSION="$(basename "$(ls -d "$RUBY_INSTALLS"/* | sort | tail -n1)")"
    local RUBY_VERSION="${1:-$DEFAULT_VERSION}"
    local RUBY_INSTALL="$RUBY_INSTALLS/$RUBY_VERSION"
    local RUBY_DIR="$(direnv_layout_dir)/ruby/$RUBY_VERSION"
    if [ ! -d "$RUBY_INSTALL" ]; then
        asdf install ruby "$RUBY_VERSION" || exit 1
    fi
    if [ ! -d "$RUBY_DIR" ]; then
        echo "Setting up ruby $RUBY_VERSION environment ..."
        mkdir -p "$RUBY_DIR" && cp -aR "$RUBY_INSTALL/." "$RUBY_DIR"
    fi
    load_prefix "$RUBY_DIR"
    layout ruby
}


layout_python3(){
    envs_dir="$HOME/.envs"
    mkdir -p "${envs_dir}"
    if [ "$(dirname "$(pwd)")" = "$HOME/src" ]; then

        VIRTUAL_ENV="$HOME/.envs/$(basename "$(pwd)")"
    fi
    layout_python python3 "$@"
    echo "direnv: using $(python -V) (${direnv_layout_dir/#$HOME/'~'})"
}


layout_uv() {
    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`uv venv\` to create one."
        uv venv
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export UV_ACTIVE=1  # or VENV_ACTIVE=1
    export VIRTUAL_ENV
}

